libevent库
    开源、精简、跨平台、专注于网络通信


源码包安装：    （参考README）
    tar zxvf libevent-2.1.12-stable.tar.gz
    cd libevent-2.1.12-stable
    ./configure             检查安装环境 生成makefile
    make                    生成 .o 和 可执行文件
    sudo make install       将必要的资源cp至系统指定目录
    进入 sample 目录，运行demo验证库安装使用情况      （运行失败，如果是64位系统，尝试把 /usr/local/lib/libevent-2.1.so.7 拷贝到 /usr/lib64/libevent-2.1.so.7）
    编译使用库的 .c 时，需要加 -levent 选项
    库名 libevent.so --> /ust/local/bin 查看的到

特性：
    基于 “事件” 的异步通信模型 -- 回调

---------------------------------------------------------------------------------------------------------------

libevent框架：
    1.创建 event_base     （乐高底座）
        struct event_base *event_base_new(void)

    2.创建事件 event
        常规事件            event --> struct event *event_new(struct event_base *base, evutil_socket_t fd, short events, void (*cb)(evutil_socket_t, short, void *), void *arg)
        带缓冲区的事件   bufferevent --> struct bufferevent *bufferevent_socket_new(struct event_base *base, evutil_socket_t fd, int options)

    3.将事件添加到 base 上
        常规事件            event --> int event_add(struct event *ev, const struct timeval *tv)
        带缓冲区的事件  bufferevent --> int bufferevent_add_event_(struct event *ev, const struct timeval *tv)

    4.循环监听事件满足
        int event_base_dispatch(struct event_base *event_base)

    5.释放 event_base
        void event_base_free(struct event_base *base)

---------------------------------------------------------------------------------------------------------------

常规事件event:
    创建事件：
        struct event *event_new(struct event_base *base, evutil_socket_t fd, short events, void (*cb)(evutil_socket_t, short, void *), void *arg)  
        参数：
            base    ：event_base_new() 返回值
            fd      ：绑定到event上的文件描述符
            events  ：对应的事件（r、w、e）
                        EV_READ         一次读事件
                        EV_WRITE        一次写事件
                        EV_PERSIST      持续触发。结合 event_base_dispatch 函数使用生效
            cb      ：一旦事件满足监听条件，回调的函数          typedef void (*event_callback_fn)(evutil_socket_t, short, void *);
            arg     ：回调函数的参数
        返回值  ：成功创建的 event

    添加事件到 event_base：
        int event_add(struct event *ev, const struct timeval *tv)
        参数：
            ev    ：event_new() 返回值
            tv    ：设置为NULL时，不会超时，直到事件触发，回调函数被调用
                    设置为非0时，等待期间内，事件触发会产生回调，时间到，即使没有事件触发也会产生回调

    从event_base上摘下事件：
        int event_del(struct event *ev)

    销毁事件：
        void event_free(struct event *ev)

未决和非未决
    未决：有资格被处理，但还没有被处理（准备好了等待事件触发）
    非未决：没有资格被处理（没有准备好，即使事件触发也不能处理）

                                         event_add()                进入事件循环event_base_dispatch(base) && 对应事件触发
    event_new() -----> 新事件（非未决态） ----------> 事件（未决态）----------------------------------------------------> 事件（激活态）
                                                        ↑  |                                                              |
                                            event_add() |  |  event_del()                                                 |
                                             EV_PERSIST |  |  （很少用）                                                   | callback()被调用
                                             （持续触发）|  |                                                              |
                                                        |  ↓                         自动进入                              ↓ 
                                                    事件（非未决） <-------------------------------------------------- 事件（被处理）

---------------------------------------------------------------------------------------------------------------

带缓冲区的事件bufferevent
    原理：bufferevent有两个缓冲区，队列实现，读走就没了，先进先出
        读：有数据 --> 读回调函数被调用 --> 使用 bufferevent_read() --> 读数据
        写：使用 bufferevent_write --> 向写缓冲中写数据 --> 该缓冲区有数据会自动写出 --> 写完，回调函数被调用（鸡肋，可用于通知写完成）

    创建bufferevent：
        struct bufferevent *bufferevent_socket_new(struct event_base *base, evutil_socket_t fd, int options)
        参数：
            base    :event_base
            fd      :封装到bufferevent内的fd
            options :BEV_OPT_CLOSE_ON_FREE  （释放bufferevent时关闭底层传输端口。这将关闭底层套接字，释放底层bufferevent等）
        返回：成功创建的bufferevent事件对象
    
    销毁bufferevent：
        void bufferevent_free(struct bufferevent *bufev)

    给bufferevent的读写缓冲区设置回调：
        对比event   ：  event_new(fd, callback)                                             event_add()
                       bufferevent_socket_new(fd)      bufferevent_setcb(callback)
    
        void bufferevent_setcb(struct bufferevent *bufev, bufferevent_data_cb readcb, bufferevent_data_cb writecb, bufferevent_event_cb eventcb, void *cbarg)
        参数：
            bufev：bufferevent_socket_new()返回值
            readcb：设置bufferevent读缓冲，对应回调     read_cb{bufferevent_read()读数据}
            writecb：设置bufferevent写缓冲，对应回调    write_cb{}  --给调用者发送写成功通知。可以为NULL
            eventcb：设置 事件回调。也可以为NULL
            cbarg：上述回调函数使用的参数

        readcb，writecb回调函数类型：
            typedef void (*bufferevent_data_cb)(struct bufferevent *bev, void *ctx);

            void readcb(struct bufferevent *bev, void *ctx)
            {
                ....
                ....
                bufferevent_read();
            }

            size_t bufferevent_read(struct bufferevent *bufev, void *data, size_t size);        类似read()的作用
            int bufferevent_write(struct bufferevent *bufev, const void *data, size_t size);    类似write()的作用

        eventcb回调函数类型：
            typedef void (*bufferevent_event_cb)(struct bufferevent *bev, short what, void *ctx);

            void event_cb(struct bufferevent *bev, short what, void *ctx)
            {
                ....
            }
            what:BEV_EVENT_CONNECTED    （请求的连接过程已经完成，实现客户端时可用）

    禁用、启用bufferevent缓冲区：
        int bufferevent_enable(struct bufferevent *bufev, short event)  启动缓冲区
        int bufferevent_disable(struct bufferevent *bufev, short event) 禁用缓冲区
        short bufferevent_get_enabled(struct bufferevent *bufev)        获取缓冲区的状态

        event：EV_READ、 EV_WRITE、 EV_READ|EV_WRITE
        默认：新建的bufferevent写缓冲是enable的，而读缓冲是disable的

客户端：
    socket();connect();
    int bufferevent_socket_connect(struct bufferevent *bev, const struct sockaddr *sa, int socklen);
    参数：
        bev：bufferevent事件对象（封装了fd）
        sa、socklen：等同于 connect() 参数2、3

服务器：
    socket();bind();listen();accept();
    struct evconnlistener *evconnlistener_new_bind(struct event_base *base, evconnlistener_cb cb, void *ptr, unsigned flags, int backlog, const struct sockaddr *sa, int socklen)
    参数：
        base  ：event_base
        cb    ：回调函数。一旦被调用，说明在其内部已经与客户端完成连接，可以进行通信，也就是数据读写操作
        ptr   ：回调函数参数
        flags ：LEV_OPT_CLOSE_ON_FREE   （同BEV_OPT_CLOSE_ON_FREE：释放bufferevent时关闭底层传输端口。这将关闭底层套接字，释放底层bufferevent等）
                LEV_OPT_REUSEABLE       （端口复用）
        backlog：listen()函数参数2，-1表最大值
        sa     ：服务器自己的地址结构体
        socklen：服务器自己的地址结构体大小
    返回值：成功创建的监听器

Libevent实现TCP服务器流程：
    1.创建event_base
    2.创建服务器连接监听器 evconnlistener_new_bind();
    3.在 evconnlistener_new_bind() 的回调函数中，处理接受连接后的操作
    4.回调函数被调用，说明有一个新客户端连接上来。会得到一个新fd，用于跟客户端通信（读、写）
    5.使用 bufferevent_socket_new() 创建一个新 bufferevent事件，将fd封装到这个事件对象中
    6.使用 bufferevent_setcb() 给这个事件对象的read、write、event设置回调
    7.设置bufferevent对象的读写缓冲区 enable/disable
    8.接收、发送数据 bufferevent_read() / bufferevent_write()
    9.启动循环监听
   10.释放资源

Libevent实现TCP客户端流程：
    1.创建event_base
    2.使用 bufferevent_socket_new() 创建一个跟服务器通信的 bufferevent 事件对象
    3.使用 bufferevent_socket_connect() 连接服务器
    4.使用 bufferevent_setcb() 给bufferevent对象的read、write、event设置回调
    5.设置bufferevent对象的读写缓冲区 enable/disable
    6.接收、发送数据 bufferevent_read() / bufferevent_write()
    7.启动循环监听
    8.释放资源