线程概念：
    进程：有独立的进程地址空间，有独立的PCB         操作系统分配资源的最小单位
    线程：有独立的PCB，没有独立的进程地址空间       CPU执行的最小单位
    ps -Lf 进程id   -->线程号LWP

线程共享：
    独享栈空间（内核栈、用户栈）
    共享 .text/.data/.rodate/.bss/heap  -->共享全局变量（errno不共享）

------------------------------------------------------------------------------------------------------------------------------

以下为线程控制原语：
------------------------------------------------------------------------------------------------------------------------------

pthread_t pthread_self(void);
    功能：获取线程id。线程id是在进程地址空间内部，用来标识线程身份的id号
    返回值：本线程id

    线程中检查出错返回：
        fprintf(stderr, "xxx error: %s\n", strerror(ret));

------------------------------------------------------------------------------------------------------------------------------

int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg)
    功能：创建线程
    参数：
        thread：传出参数，表示新创建的子线程id
        attr：线程属性，传NULL表示用默认属性
        start_routine：子线程回调函数。创建成功，pthread_create函数返回时，该函数会被自动调用
        arg：回调函数的参数，没有的话传NULL
    返回值：
        成功：0
        失败：errno

    
    循环创建N个子线程
        for(i = 0; i < 5; i++)
            pthread_create(&t_id, NULL, thread_fun, (void*)i);

------------------------------------------------------------------------------------------------------------------------------

void pthread_exit(void *retval);
    功能：退出当前线程
    参数：
        retval：退出值。无退出值，NULL

    exit()：退出当前进程
    return：返回到调用者那里去

------------------------------------------------------------------------------------------------------------------------------

int pthread_join(pthread_t thread, void **retval)
    功能：阻塞回收线程
    参数：
        thread：待回收的线程id
        retval：传出参数。回收的那个线程的退出值
    返回值：
        成功：0
        失败：errno

------------------------------------------------------------------------------------------------------------------------------

int pthread_detach(pthread_t thread)
    功能：设置线程分离
    参数：
        thread：待分离的线程id
    返回值：
        成功：0
        失败：errno

------------------------------------------------------------------------------------------------------------------------------

int pthread_cancel(pthread_t thread)
    功能：杀死一个线程。需要到达取消点（保存点）(进内核)
    参数：
        thread：待杀死的线程id
    返回值：
        成功：0
        失败：errno
    如果，子线程没有到达取消点，那么pthread_cancel无效
    可以在程序中，手动添加一个取消点。使用pthread_testcancel()
    成功被pthread_cancel杀死的线程，返回-1，使用pthread_join回收

------------------------------------------------------------------------------------------------------------------------------

    线程控制原语                            进程控制原语

    pthread_create()                        fork()
    pthread_self()                          getpid()
    pthread_exit()                          exit()
    pthread_join()                          wait()/waitpid()        /return:回到调用者那边去
    pthread_cancel()                        kill()
    pthread_detach()

------------------------------------------------------------------------------------------------------------------------------

线程属性：
    设置分离属性
    pthread_attr_t attr;                                                创建一个线程属性结构体变量
    pthread_attr_init(&attr);                                           初始化线程属性
    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);        设置线程属性为分离态
    pthread_create(&tid, &attr, thread_fun, NULL);                      借助修改后的 设置线程属性 创建为分离态的新线程
    pthread_attr_destroy(&attr);                                        销毁线程属性