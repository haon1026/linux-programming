协议：
    一组规则

分层模型结构：
    OSI七层模型：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层
    TCP/IP四层模型：网络接口层（链路层）、网络层、传输层、应用层
        应用层：http、ftp、nfs、ssh、telnet
        传输层：TCP、UDP
        网络层：IP、ICMP、IGMP
        链路层：以太网帧协议、ARP

网络传输流程：
    数据没有封装之前，是不能在网络中传递

以太网帧协议：
    ARP协议：根据IP地址获取MAC地址
    以太网帧协议：根据MAC地址，完成数据包传输

IP协议：
    版本：IPv4、IPv6  --- 4位
    TTL：time to live。设置数据包在路由节点中的跳转上限。每经过一个路由节点，该值-1，值减为0的路由，有义务将该数据包丢弃
    源IP：32位 --- 4字节         192.168.0.108 --- 点分十进制 IP地址（string） --- 二进制
    目的IP：32位 --- 4字节

UDP协议：
    源端口号：16位 = 65536
    目的端口号：16位

TCP协议：
    源端口号：16位 = 65536
    目的端口号：16位
    序号：32位
    确认号：32位
    标志位：6位
    窗口大小：16位

IP地址：可以在网络环境中，唯一标识一台主机
端口号：可以在网络的一台主机上，唯一标识一个进程
IP地址+端口号：可以在网络环境中，唯一标识一个进程

---------------------------------------------------------------------------------------------------------------

c/s模型：
    client-server
b/s模型：
    browser-server

            C/S                                     B/S
    优点：  缓存大量数据、协议选择灵活              安全性较强、能跨平台、开发工作量小
            速度快
    
    缺点：  安全性较差、不能跨平台、开发工作量大            不能缓存大量数据、严格遵守http

---------------------------------------------------------------------------------------------------------------

网络套接字：socket
    一个文件描述符指向一个套接字（该套接字内部由内核借助两个缓冲区实现）
    在通信过程中，套接字一定是成对出现的

网络字节序：
    小端法：高字节存高地址，低字节存低地址  int a = 0x12345678  ->  78563412
    大端法：高字节存低地址，低字节存高地址  int a = 0x12345678  ->  12345678     (网络存储)
    htonl --> 本地 -》 网络（IP）
    htons --> 本地 -》 网络（Port）
    ntohl --> 网络 -》 本地（IP）
    ntohs --> 网络 -》 本地（Port）

IP地址转换函数：
    int inet_pton(int af, const char *src, void *dst);
    功能：本地字节序（string IP）转换为网络字节序
    参数：
        af  ：AF_INET、AF_INET6
        src ：IP地址（点分十进制）
        dst ：转换后的网络字节序的IP地址
    返回值：
        成功：1
        异常：0，说明src指向的不是一个有效的IP地址
        失败：-1

    const char *inet_ntop(int af, const void *src, char *dst, socklen_t size);
    功能：网络字节序转换为本地字节序（string IP）
    参数：
        af  ：AF_INET、AF_INET6
        src ：网络字节序的IP地址
        dst ：转换后的本地字节序（string IP）
        size: dst的大小
    返回值：
        成功：dst
        失败：NULL

---------------------------------------------------------------------------------------------------------------

sockaddr地址结构：  IP + Port --> 在网络环境中唯一标识一个进程
    #include <arpa/inet.h>
    struct sockaddr_in addr;
    addr.sin_family = AF_INET;
    addr.sin_port = htons(9999);
    
    //int dst;
    //inet_pton(AF_INET, "192.168.1.169", (void *)&dst);
    //addr.sin_addr.s_addr = dst;

    【*】addr.sin_addr.s_addr = htonl(INADDR_ANY);       //取出系统中有效的任意IP地址。二进制类型
    bind(fd, (struct sockaddr*)&addr, size);

socket函数：
    #include <sys/socket.h>
    int socket(int domain, int type, int protocol)
    功能：创建一个套接字
    参数：
        domain：AF_INET、AF_INET6、AF_UNIX
        type：SOCK_STREAM、SOCK_DGRAM
        protocol：0
    返回值：
        成功：新套接字所对应的文件描述符
        失败：-1 errno

bind函数：
    int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen)
    功能：给socket绑定一个地址结构（IP+PORT）
    参数：
        sockfd：socket()返回值
        addr：
            struct sockaddr_in iaddr;
            iaddr.sin_family = AF_INET;
            iaddr.sin_port = htons(8888);
            iaddr.sin_addr.s_addr = htonl(INADDR_ANY);
            (struct sockaddr *)&iaddr;
        addrlen：sizeof(iaddr)  地址结构的大小
    返回值：
        成功：0
        失败：-1 errno

listen函数：
    int listen(int sockfd, int backlog);
    功能：设置同时与服务器建立连接的上限数（同时进行3次握手的客户端数量）
    参数：
        sockfd：socket()返回值
        backlog：上限数值。最大值128
    返回值：
        成功：0
        失败：-1 errno

accept函数：
    int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen)
    功能：阻塞等待客户端建立连接，成功的话，返回一个与客户端成功连接的socket文件描述符
    参数：
        sockfd：socket()返回值
        addr：传出参数。成功与服务器建立连接的那个客户端的地址结构（IP+PORT）
        addrlen：传入传出。
                socklen_t client_addr_len = sizeof(addr);
                &client_addr_len
                入：addr的大小。出：客户端addr的实际大小
    返回值：
        成功：能与服务器进行数据通信的socket对应的文件描述符
        失败：-1 errno

connect函数：
    int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen)
    功能：使用现有的socket与服务器建立连接
    参数：
        sockfd：socket()返回值
        addr：传入参数。服务器的地址结构
            struct sockaddr_in serv_addr;
            serv_addr.sin_family = AF_INET;
            serv_addr.port = 9999;      跟服务器bind时设定的port完全一致
            inet_pton(AF_INET, "服务器的IP地址", &serv_addr.sin_addr.s_addr)
        addrlen：服务器的地址结构的大小
    返回值：
        成功：0
        失败：-1 errno
    
    如果不使用bind绑定客户端地址结构，采用“隐式绑定” （系统自动分配）

---------------------------------------------------------------------------------------------------------------

TCP通信流程分析：
    server：                            （nc 127.0.0.1 port直接测试server）
        1.socket()      创建socket
        2.bind()        绑定服务器地址结构
        3.listen()      设置监听上限
        4.accept()      阻塞监听客户端连接
        5.read(fd)      读socket获取客户端数据
        6.小-大写       toupper()
        7.write(fd)
        8.close()

    client：
        1.socket()      创建socket
        2.connect()     与服务器建立连接
        3.write()       写数据到socket
        4.read()        读转换后的数据
        5.显示读取结果
        6.close()

---------------------------------------------------------------------------------------------------------------