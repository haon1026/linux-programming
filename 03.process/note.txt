进程：
    程序：死的。只占用磁盘空间      --剧本
    进程：活的。运行起来的程序。占用内存、CPU等系统资源     --戏

PCB进程控制块：
    进程ID
    文件描述符表
    进程状态：初始态、就绪态、运行态、挂起态、终止态
    进程工作目录位置
    *umask掩码
    信号相关信息资源
    用户id和组id

------------------------------------------------------------------------------------------------------------------------------

fork函数：
    pid_t fork()
    创建子进程。父子进程各自返回。父进程返回子进程pid，子进程返回0
    pid_t getpid(); pid_t getppid()
    循环创建N个子进程模型，每个子进程标识自己的身份

父子进程相同：
    刚fork后：data段，text段，堆，栈，环境变量，全局变量，宿主目录位置，进程工作目录位置，信号处理方式
父子进程不同：
    进程id、fork返回值、各自的父进程、进程创建时间、闹钟、未决信号集
父子进程共享：
    读时共享，写时复制      （着重强调全局变量，对比线程）
    1.文件描述符（打开文件的结构体）    2.mmap建立的映射区

父子进程GDB调试：
    set follow-fork-mode child  设置跟踪子进程
    set follow-fork-mode parent 设置跟踪父进程  （默认）

------------------------------------------------------------------------------------------------------------------------------

exec函数族：
    功能：使进程执行某一程序。
    int execlp(const char *file, const char *arg, ...)      //借助PATH环境变量找寻待执行程序
    参数：
        file：程序名
        arg0
        argv1
        argv2
        哨兵：NULL
    返回值
        成功：无返回值
        失败：-1
    
    int execl(const char *path, const char *arg, ...)      //自己指定待执行程序路径
    int execvp(const char *file, const char *argv[])

------------------------------------------------------------------------------------------------------------------------------

孤儿进程：
    父进程先于子进程终止，子进程沦为“孤儿进程”，会被init进程收养
僵尸进程：
    子进程终止，父进程尚未对子进程进行回收，再次期间，子进程为“僵尸进程”    kill对其无效
查看：ps ajx --> pid ppid gid sid    

------------------------------------------------------------------------------------------------------------------------------

wait函数：      回收子进程退出资源，阻塞回收任意一个
    pid_t wait(int *status)
    函数作用1：阻塞等待子进程退出
    函数作用2：清理子进程残留在内核的PCB资源
    函数作用3：通过传出参数，得到子进程结束状态

    参数：（传出参数）回收进程的状态
    返回值：
        成功：回收进程的id
        失败：-1，errno

    获取子进程正常终止值：
        WIFEXITED(status) --> 为真 --> 调用 WEXITSTATUS(status) --> 得到子进程退出值
    获取导致子进程异常终止信号
        WIFSIGNALED(status) --> 为真 --> 调用 WTERMSIG(status) --> 得到导致子进程异常终止的信号编号

------------------------------------------------------------------------------------------------------------------------------

waitpid函数：   指定一个进程进行回收，可以设置非阻塞
    pid_t waitpid(pid_t pid, int *status, int options)
    参数：
        pid：指定回收某一个子进程pid
            >0  ：待回收子进程pid
            -1  ：任意子进程
            0   ：同组的任意子进程
            <-1 ：回收指定进程组内的任意子进程
        status：（传出参数）回收进程的状态
        options：WNOHANG 指定回收方式为非阻塞
    返回值：
        > 0：表示成功回收的子进程id
        0 ： 函数调用时，参数3指定了WNOHANG，并且没有子进程结束
        -1：失败，errno

总结：
    wait,waitpid    一次调用，回收一个子进程
                    想回收多个，while
    waitpid(-1, &status, 0) = wait(&status)
